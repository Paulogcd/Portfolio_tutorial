[
  {
    "objectID": "3_publish_with_github_pages.html",
    "href": "3_publish_with_github_pages.html",
    "title": "3. Publish your website with Github Pages",
    "section": "",
    "text": "Caution\n\n\n\nThis tutorial is currently going under construction. All chapters and sections are not finished and might include incomplete explanations. Feel free to reach out to me to point out some missing elements.\nCongratulations for having made it so far ! Now that we have a decent-looking basis for our online portfolio, we are ready to make it available to the real world. In order for us to publish our content, we are going to use GitHub pages, a website hosting service of GitHub.\nThis final step is the easiest one, so hang it on, we are soon reaching the end of this tutorial.",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "3_publish_with_github_pages.html#activating-github-pages",
    "href": "3_publish_with_github_pages.html#activating-github-pages",
    "title": "3. Publish your website with Github Pages",
    "section": "Activating GitHub pages",
    "text": "Activating GitHub pages\n\n\n\n\n\n\nCaution\n\n\n\nThis section is currently going under construction. Is it incomplete, and I am currently working on it. Its content is coming soon ! Feel free to reach out to me to point out some elements that could be included here.\n\n\nIn order for us to publish the content that is available in our _site folder, we need first to goto our GitHub repository, and to click on settings at the top-right. We then click in the “Code and automation” on the “Pages” section. You should see something like this :\n\n\n\nAdd image\n\n\nWe are now going to activate GitHub Pages, and select “Deploy from a branch” for the Source. We are then going to select the folder from which GitHub Pages publishes our website. In our case, it is the “_quarto” folder. The branch from which it selects the folder should be “main” or “master” (but could have another name) depending on your git configuration. After selecting it, you can click on “Save” :\n\n\n\nAdd image\n\n\nYou can then go to https://username.github.io, with your actual GitHub username instead of “username”. After a few minutes, it should be on. Congratulations, you have published your portfolio !\n\n\n\nAdd image\nAdd image",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "1_git_and_github.html",
    "href": "1_git_and_github.html",
    "title": "1. Setting up our workflow",
    "section": "",
    "text": "Caution\n\n\n\nThis tutorial is currently going under construction. All chapters and sections are not finished and might include incomplete explanations. Feel free to reach out to me to point out some missing elements.\nThe first step of our online portfolio creation is to set up our working environment. In order to do so, we are going to use several tools, like Git, Github and Visual Studio Code. Git and Github will allow us to manage the changes of our files, and store them online. Visual Studio Code will allow us to modify our files.",
    "crumbs": [
      "Home",
      "1. Setting up our workflow"
    ]
  },
  {
    "objectID": "1_git_and_github.html#git-and-github",
    "href": "1_git_and_github.html#git-and-github",
    "title": "1. Setting up our workflow",
    "section": "Git and Github",
    "text": "Git and Github\nGit is a software that allows to manage all the changes done to the selected files. It is also called a version management software, or a version control system. We want to check all the versions and changes of our files from their creation until their current version ? If we use Git, it is possible.\n\nGit does not only work with code files, but also with any type of file. If you have a text file (like a Master thesis for example…) for which you want to control the different versions, you can use git for it !\n\nGitHub is a company (currently owned by Microsoft) that puts at disposition servers which you can use to store your code projects. Their website integrates Git and offers a remote access to all the files you choose to track with it.\n\nGithub has a lot of different uses, including collaborative coding, but this tutorial only focuses on how to use it to manage your project with Git and Quarto. It is widely used in the programming community and is also sometimes referred as the social network of developers.\n\nTo use Git and Github, this tutorial offers two methods :\n\nThe first one is based on the Graphical User Interface (GUI) solution of Github Desktop. It is an application that offers a simple interface to interact with Git and Github at the same time. It is simple and quick to setup.\nThe second method is based on the Command Line Interface (CLI) approach. It uses the basic features of Git and Github, and uses the Command Line to interact with Git and Github. It requires more steps, and is a harder to setup, but you will develop a deeper understanding of what is going on when you use Git and Github.\n\nIf you do not wish to dive deep into the mechanisms of the Git and its interaction with Github, it is advised that you proceed with the GUI approach. However useful Graphical Interfaces are, they imply necessarily abstractions of how processes are really working. I highly encourage you to read the CLI section, even if you do not follow all of its instruction. Also, you can always continue with the GUI approach, and later on come back to this chapter to read the CLI section.\n\nGitHub Desktop : The Graphical User Interface (GUI)Git Command Line Interface (CLI)\n\n\n\nCreate your Github account\nThe first step is to create a Github account. We can go here and click on “Sign up”.\nWe have to be especially thoughtful of our username, because our website will inlcude it in its url. It will indeed have the format “https://username.github.io”.\nAfter having created our account, we should land on a page looking like that :\n\n\n\nThe starting page of Github.\n\n\nFor this tutorial, I create an account named frpgcd. It will be the example username you will see in all the screenshots.\n\n\nInstall and configure Github Desktop\nThe next step is to install Github desktop here.\n\n\n\nGithub Desktop landing page.\n\n\nOnce the installation is done, we can open Github Desktop and connect yourself to our recently created Github account. By clicking on “Sign in to GitHub.com”, we should be redirected to a connection page on our browser, and once we’re connected on your browser, we are asked if we authorize Github Desktop to have access to our Github account.\n\n\n\n\n\n\n\n\n\nStarting page of Github Desktop.\n\n\n\n\n\n\n\nAuthorization page to Github.\n\n\n\n\n\n\nGithub desktop initialization.\n\n\n\nThen, we will be redirected to a configuration page on Github Desktop. We can here notice that a slightly different email address can be specified by default instead of the one we used in the creation process of our Github account. This is normal, it does not matter much for what we are trying to achieve here. We can also finish the configuration process with this different email address.\n\n\n\nGithub Desktop configuration.\n\n\nOnce we are done with the configuration process, we should land on a page looking like that :\n\n\n\nGithub Desktop home page.\n\n\nIf we want to start our portfolio, we need a folder with all of our files. On our computer, we call it a directory, and on Github we call it a “repository”.\nWe click on “Create a New Repository on your Local Drive…”, and create a repository called “username.github.io”, with our actual username instead of “username”. I will create one, and since my Github username is frpgcd, my repository will be called “frpgcd.github.io” :\n\n\n\nCreating a repository on Github Desktop.\n\n\nNow, we should get something looking like that :\n\n\n\nAn empty repository on Github desktop.\n\n\nLet us take a moment to comment what we see. In the left side bar, we have all the modified files of our directory. Here, Github desktop created automatically a .gitattributes file. In the right side interface, we see the content of the selected files. Here, we see that two lines have been added, thanks to the green color and the addition sign “+”.\nNow, if you make any change in your folder, you will be able to commit the changes. “Commit” means here that the changes will be recorded in our history of changes. Once our change are commited, we can publish then on our repository on Github with the top-right button “Publish repository”.\nIn order for us to add files to our directory and modify them, we are now going to use another tool : Visual Studio Code.\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThis section is currently going under construction. Is it incomplete, and I am currently working on it. Its content is coming soon ! Feel free to reach out to me to point out some elements that could be included here.\n\n\nThis section presents the method to use Git and Github via a CLI.\n\nInstall vscode\nIt is much easier to use the CLI of Git with vscode. Therefore, we should first install vscode. I invite you to follow the instruction of the last section of this chapter and then to come back here.\n\n\nBasics of Git\nNow, we are going to install Git from here.\n\n\n\nThe installation page of git.\n\n\nOnce it is done, we can go back to vscode and open a new terminal console.\nNow, to understand how to use Git, we need to stop for a moment, and have in mind the four main steps of our workflow :\n\nFirst, we have to initialise git in a folder. This will create a folder with a .git extension in our current folder, that will be the logbook.\nSecond, we have to choose which files we track with git. The changes of the tracked files will be registered in the .git folder.\nWe can now work on our files. Once we want to save the changes of the files, we ‘add’ the modified files to the logbook.\nFinally, we have to describe the changes. Without descriptions, the changes won’t be saved in the logbook. To describe the changes, we write a ‘commit’ in the logbook.\n\nConcretely, using vscode :\n\nWe write git init in the terminal console to initialise a git folder. This create a hidden folder inside of our folder, named .git. You must not necessarily see it to use git.\nWe then click on “new file” on vscode, for example a text-file. We write something in it, and save it as text.txt.\nWe begin tracking this file with git, using git add text.txt.\nWe describe our action using git commit -m \"Adding a text file.\".\n\nAt this point, you should have something like that :\n\n\n\nInitializing git, adding a file, and commiting this change.\n\n\nAt any point, we can use some other git commands to have more information. For example :\n\ngit status informs us about which files in our folder are being tracked, and what modifications are not yet registered.\ngit log gives back the logbook, i.e. the list of changes that were saved.\ngit diff gives the differences between the current version of your files and the latest version saved in the logbook.\n\nFinally, it is also useful to set up a branch. Without entering into too much details, a branch is the path in which you are registering all your commits and files. If you create and program on another branch, it is like you are continuing the development of your code on a parallel version of your program, without modifying the “main” version of it (i.e. the “main” branch). It is important to set up a main branch, in order for git not to bug in future operations. In order to do so, we can enter : git branch -M main in the terminal.\nGit is a very powerful tool that allows to do a lot of collabortive code managing, but we choose here to mainly exploit one of its features : remote synchronization. In addition to having this local logbook on your computer, you can indeed also send your files to a remote server, in a similar way than the cloud or a remote drive. This is where Github enters into play.\n\n\nBasics of Github\nTo use Github, the first step is to go to GitHub and create an account. Once your account is created, you can create a repository, named “username.github.io”, replacing “username” with your actual user name. Since I choose the username frpgcd, I will create in this example a repository name “frpgcd.github.io”.\n\n\n\nClick on the green button “Create a repository”.\n\n\n\n\n\nStarting page of the repository creation process.\n\n\n\n\n\nPage of the repository creation process filled with information.\n\n\n\nNote : During the creation process of a repository, you are asked for a license. It is important to chose one, because without it, the most restrictive policy applies. After a quick research, it seems that the Creative Commons BY-NC-ND 4.0 Deed license should cover all the cases we need for an online academic portfolio. It is very permissive, but requires citation (“appropriate credit”), does not allows for commercial uses and derivatives. If your needs are different, it is worth looking into different kinds of license to see which one is better for your own usage.\n\nOnce it is done, we can go back to vscode, to add a connection between our local folder and the remote repository we just created. In order to do that, we first have to configurate git.\n\nEnter git config --global user.name \"Your Name\", replacing “Your Name” with the name of your choice. It doesn’t have to be the same as your GitHub user name.\nEnter git config --global user.email \"your@mail.com\", replacing “your@mail.com” with the email of your choice. Note that it does not require you to actually own this email adress.\nThen, we have to add a ssh key to our GitHub account. An ssh key allows you to communicate to GitHub from your computer. Enter ssh-keygen -t ed25519 -C \"your@email.com\", replacing “your@email” with your actual email. Your terminal will ask for a passphrase, but it’s better for simplicity purposes to not enter anything, and just press the enter key on your keyboard.\n\nIn my case, with the username “frpgcd”, I would enter in my Terminal console :\ngit config --global user.name \"frpgcd\"\ngit config --global user.email \"frpgcd@mail.com\"\nssh-keygen -t ed25519 -C \"frpgcd@email.com\"\n\nNow, we are going to use this key to establish a connection with GitHub. On your terminal, you can enter cat ~/.ssh/id_ed25519.pub or open ~/.ssh/id_ed25519.pub, and it will give you back a character string beginning with “ssh-ed22519”. Go to your GitHub account, click on your profile picture at the top right of the website, choose “settings”, then click on “ssh and gpg keys”, then on “add new ssh key”, choose the title you want (for example the name of your current computer), and in “key”, add the value your terminal gave back to you. You should be connected !\n\n\n\n\nIn our settings, we must find the ssh and gpg keys section.\n\n\n\n\n\nAfter having clicked on “New SSH Key”, we can add what we get from our terminal after entering “cat ~/.ssh/id_ed25519.pub” in the “Key” section.\n\n\n\nYou should not share your ssh keys to the public. It could jeopardize the safety of your connection and access to the distant repository.\n\n\nNow that our GitHub account is connected to our computer, we have to connect our local folder to a repository. We must go on our repository, and copy the text it gives us in the SSH section (it should be something like “git@github.com:username/name_of_the_repository.git”). In our vscode terminal, with our folder open, we can then enter : git remote add origin git@github.com:username/name_of_the_repository.git. The connection between our local folder and distant repository should be established.\nWe can “push” the content of our local folder to our remote folder. This is a command that we use once all the changes are commited in our logbook to send all the information in the remote server. To be able to push correctly, you first enter git push -u origin main, and then you can just enter git push for the next times, when your changes are added and commited.\n\nIn my case, I have, with the username “frpgcd” and the repository “frpgcd.github.io” :\ngit remote add origin git@github.com:frpgcd/frpgcd.github.io.git\ngit push -u origin main\n\nYou can also initialise a git folder in another directory, and “clone” an existing Github repository. This will create a duplicate of this repository in your folder and on your Github account, or just load the data locally if it is one of your repositories. Although this is not covered in the current tutorial, you can check the Github and Git documentations to get more information on those operations.\n\n\n\nUse Git and Github together\nNow that the connection between your local folder and your distant repository has been created, you can add modifications to your folder (like creating a new file), add those changes via git add followed by the name of your new document (you can also use * to select everything in your folder), commit those changes via git commit -m \"the description of your changes\", and then push those changes via git push. This add-commit-push process is one of the basics to synchronize your local folder with the files of your GitHub account.\nFor example, if we want to create a new file, named “new_file.txt”, to enter some text in it, to save it and to track it with git, and then to send it to our distant GitHub repository, we would do, after saving the file :\ngit add new_file.txt\ngit commit -m \"Adding a new file.\"\ngit push\nYou can then verify that your changes have been taken into account by going on the website of GitHub, on your repository. Your tracked files should appear there.",
    "crumbs": [
      "Home",
      "1. Setting up our workflow"
    ]
  },
  {
    "objectID": "1_git_and_github.html#visual-studio-code",
    "href": "1_git_and_github.html#visual-studio-code",
    "title": "1. Setting up our workflow",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nVisual Studio Code (VSC or vscode) is a software to write and execute code, also called Integrated Development Environment (IDE). It is largely used, and a lot of extensions exist to customize your experience with it. We are going to install vscode here.\n\n\n\nDowload page of vscode.\n\n\nOne of the strenghts of vscode is the fact that it can open and manage a whole folder. We are now going to use vscode to open the folder “username.github.io” that we created earlier. To do so, we open vscode, click on “open” in the starting page, and select our folder.\n\n\n\nStarting page of vscode. Click on “open” to chose a folder to open.\n\n\nNow that we selected our folder, vscode opened it and we should see something like that :\n\n\n\nAn empty folder opened with vscode.\n\n\n\nNOTE : When you open a folder for the first time, vscode may ask you “Do you trust the authors of the files in this folder?”. Since you just created your folder and that it is empty, you can naturally click on yes. You are the author !\n\nWe are almost done. The last step is to create a terminal within vscode. In order for us to do that, we go the research bar at the top and enter “&gt;Terminal: Create New Terminal”. This will pop-up a terminal console in vscode.\n\n\n\nHow to create a new terminal on vscode.\n\n\nThis should normally generate a console at the bottom of vscode, where your username, the name of your computer, adn/or the name of our current folder could appear :\n\n\n\nTerminal in vscode.\n\n\nSimply put, the terminal allows to textually communicate with your machine, instead of graphically, like it is usually the case. For those following the CLI section, we use Git with the terminal, and this is why we calll it the Command Line Interface. Having a terminal opened in vscode makes it possible to manipulate the current opened folder more easily. This is also how we will be using Quarto.\n\nThis tutorial does not focus on what a terminal is, what shell, bash or any kind of line command are and do. However, it would be very useful for you to know how to use the basics of it. Further resources are available at the end of this page, and I strongly encourage you to check them, especially the first four chapters of Florian Oswald’s lecture on the shell.\n\nIt is done ! We have created a Github account, connected it to our Github Desktop application, created a repository, and opened it with vscode. Next step : using Quarto to create our website content.",
    "crumbs": [
      "Home",
      "1. Setting up our workflow"
    ]
  },
  {
    "objectID": "1_git_and_github.html#further-resources",
    "href": "1_git_and_github.html#further-resources",
    "title": "1. Setting up our workflow",
    "section": "Further Resources",
    "text": "Further Resources\nYou are now ready to proceed to the second chapter, that treats content generation with Quarto. However, if you wish to dive deeper into the tools presented in this first chapter, and try to understand better Git, GitHub, or even the Terminal and Visual Studio Code, you might be tempted to look at additional material. First of all, for all that has been covered in this tutorial, I recommend the lecture of Florian Oswald about git and github, available at https://floswald.github.io/ScPoProgramming/05-git.html. For more specific questions, you might find the following resources useful :\nAbout vscode :\n\nThe official documentation of vscode, available at : https://code.visualstudio.com/docs\n\nAbout the terminal :\n\nThe first four sessions of the Florian Oswald lecture, available at : https://floswald.github.io/ScPoProgramming/\nA general tutorial about the command line, including resources for Windows, MacOS, and Linux, available at : https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\nThe vscode documentation about the terminal inside vscode, that might require some prior knowledge about the command line, available at : https://code.visualstudio.com/docs/terminal/basics\n\nAbout git :\n\nThe official documentation of git, availbale at : https://git-scm.com/doc\nThe w3school tutorial for git, available at : https://www.w3schools.com/git/\n\nAbout github :\n\nThe official tutorial of github on using git and github together, available at : https://docs.github.com/en/get-started/start-your-journey\n\n\n\n\nThe starting page of Github.\nGithub Desktop landing page.\nStarting page of Github Desktop.\nAuthorization page to Github.\nGithub Desktop configuration.\nGithub Desktop home page.\nCreating a repository on Github Desktop.\nAn empty repository on Github desktop.\nThe installation page of git.\nInitializing git, adding a file, and commiting this change.\nClick on the green button “Create a repository”.\nStarting page of the repository creation process.\nPage of the repository creation process filled with information.\nIn our settings, we must find the ssh and gpg keys section.\nAfter having clicked on “New SSH Key”, we can add what we get from our terminal after entering “cat ~/.ssh/id_ed25519.pub” in the “Key” section.\nDowload page of vscode.\nStarting page of vscode. Click on “open” to chose a folder to open.\nAn empty folder opened with vscode.\nHow to create a new terminal on vscode.\nTerminal in vscode.",
    "crumbs": [
      "Home",
      "1. Setting up our workflow"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "Conclusion",
    "section": "",
    "text": "This is a conclusion. It is currently under development.\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Conclusion"
    ]
  },
  {
    "objectID": "foreword.html",
    "href": "foreword.html",
    "title": "Foreword",
    "section": "",
    "text": "This tutorial aims to give you the tools to easily and efficiently create, and maintain your own online portfolio.\nThis tutorial is divided in three chapters :\n\nThe first chapter of this tutorial focuses on creating a simple workflow for the rest of our work.\nWe will use Git, Github, and Visual Studio Code.\nThe second capter of this tutorial focuses on the design of the website.\nWe will use Quarto.\nThe third and last chapter of this tutorial focuses on the publication of our website.\nWe will use Github Pages.\n\nAfter having designed your website with a static website generator, we finally have to make it available to the world, i.e. publish it. Several free hosting services exist, such as Netlify, Quarto Pub, and GitHub Pages, among other ones. This tutorial focuses on GitHub Pages in the third chapter.\nNow, in order to make the whole process easier and fluid, this tutorial first focuses on the establishment of a workflow using Visual Studio Code, Git and GitHub. This workflow allows to make the second and third steps easier, and is also very useful if you are to work in collaborative projects in the future. This is thus the first chapter of this tutorial.\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Foreword"
    ]
  },
  {
    "objectID": "section_warning.html",
    "href": "section_warning.html",
    "title": "Research student portfolio tutorial",
    "section": "",
    "text": "Caution\n\n\n\nThis section is currently going under construction. Is it incomplete, and I am currently working on it. Its content is coming soon ! Feel free to reach out to me to point out some elements that could be included here.\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "warning.html",
    "href": "warning.html",
    "title": "Research student portfolio tutorial",
    "section": "",
    "text": "Caution\n\n\n\nThis tutorial is currently going under construction. All chapters and sections are not finished and might include incomplete explanations. Feel free to reach out to me to point out some missing elements.\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research student portfolio tutorial",
    "section": "",
    "text": "Caution\n\n\n\nThis tutorial is currently going under construction. All chapters and sections are not finished and might include incomplete explanations. Feel free to reach out to me to point out some missing elements.\nYou don’t have much time and are not proefficient in web development, but you would like to have a portfolio to share your work ? Welcome to this research student portfolio tutorial !"
  },
  {
    "objectID": "index.html#objective-of-this-tutorial",
    "href": "index.html#objective-of-this-tutorial",
    "title": "Research student portfolio tutorial",
    "section": "Objective of this tutorial",
    "text": "Objective of this tutorial\n\nThis simple tutorial aims at giving the right tools to any students who want to publish and maintain their portfolio in a quick and efficient way.\nIt requires no prior programming experience.\nYou can find all the material and code of this tutorial on this Github repository."
  },
  {
    "objectID": "index.html#structure-and-material",
    "href": "index.html#structure-and-material",
    "title": "Research student portfolio tutorial",
    "section": "Structure and material",
    "text": "Structure and material\nThis tutorial is divided in three main chapters :\n\nBasics with visual studio code and git\nBasics with quarto\nQuickly publishing your own portfolio with github page\n\nThose three chapters are available on slides or on more detailed pages.\n\n\n\nChapter\nDescription\n\n\n\n\n1. Git and Github with Visual Studio Code\nIn this first chapter, you will learn how to use Git and GitHub with Visual Studio Code. This serves to setup the workflow that will be used in the rest of the tutorial.\n\n\n2. Create your content with Quarto\nIn this chapter, you will learn to generate web content with Quarto, and to easily modify and maintain it. This chapter serves to create the content of your portfolio you will later publish.\n\n\n3. Publish your website with GitHub Pages\nIn this final chapter, you will learn how to publish your website, i.e. make it accessible to everyone on the internet. We use the publishing service GitHub Pages and show how to quickly update your website with the previous presented tools."
  },
  {
    "objectID": "index.html#further-resources",
    "href": "index.html#further-resources",
    "title": "Research student portfolio tutorial",
    "section": "Further resources",
    "text": "Further resources\nThis tutorial is mainly based on the great documentation of quarto and on the Florian Oswald class, Associate Professor of Economics at Sciences Po in Paris, and my teacher to introduction to programming."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the website of a tutorial for quick and simple maintanable portfolio websites with Quarto.\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "2_quarto.html",
    "href": "2_quarto.html",
    "title": "2. Creating our content with Quarto",
    "section": "",
    "text": "Caution\n\n\n\nThis tutorial is currently going under construction. All chapters and sections are not finished and might include incomplete explanations. Feel free to reach out to me to point out some missing elements.\nNow that we know how to make use of Github and Visual Studio Code, it is time for us to use Quarto.\nQuarto is a static website generator. It is a software that allows us to create web content from human readable files. Usually, we should learn HTML and CSS to know a bit of Web development. Indeed, those are the languages that traditional web browser support. When you go to a webpage, your web browser transforms html and css into a graphical interface, which is easier to understand for humans. However, in the recent years, a lot of static website generator have emerged, turning the conception of websites much easier. Among the several static website generator, Jekyll, Zola, Hugo, and Quarto can be cited, but they are far from being the only ones.\nThis tutorial focuses on Quarto for several reasons. First, it is easy to use. The commands are user-friendly, and do not require much background knowledge. Second, its format (qmd, or “quarto markdown”) allows to easily include data visualization, code and support some very useful libraries like Shiny, that allow to create interactive web pages with data. It makes it easy to showcase your work if you deal with data and some statistical analysis with R, Python, or Julia for example. It is especially important if we are trying to build a research portfolio.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#installation-of-quarto",
    "href": "2_quarto.html#installation-of-quarto",
    "title": "2. Creating our content with Quarto",
    "section": "Installation of Quarto",
    "text": "Installation of Quarto\nThe first step of this chapter is to download Quarto here.\n\n\n\nInstallation page of Quarto\n\n\nOnce it is done, we will be able to interact with Quarto through the terminal of vscode.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#create-a-quarto-project",
    "href": "2_quarto.html#create-a-quarto-project",
    "title": "2. Creating our content with Quarto",
    "section": "Create a Quarto project",
    "text": "Create a Quarto project\nThe second step is to create a quarto project in your folder (the one you synchronized with your online GitHub repository). In order to do that, you can go in vscode, and enter in the terminal quarto create. You will then be guided with several questions regarding the nature of the project you wish to create. For the purpose of creating a portfolio, I would recommend to choose to create a website.\n\n\n\nCreation of a project with Quarto\n\n\nAfter entering quarto create, quarto asks you different things :\n\nThe nature of the quarto environment you want to create. You have the choice between a project and an extension. For a portfolio, I recommend creating a project.\nThe type of your project. It gives you the choice between :\n\ndefault\nwebsite\nblog\nmanuscript\nbook\nconfluence\n\nYou could choose another different kinds of projects here. For example, default would work well enough also. However, I recommend creating website for the sake of simplicity.\nQuarto then asks for the Directory you wish to create your quarto project in. Since you are already in the folder you opened with vscode, you should write a simple dot . and press enter.\n\n\nNote : The dot . refers to the current directory in several langages. To understand better how a path works, I recommend consulting this article.\n\nOnce the creation process is done, you will see appear in your folder several files : index.qmd, about.qmd, _quarto.yml, style.css.\nLet’s take a moment to see what they do :\n\nThe files with a “.css” extension are Cascading Style Sheets (css) files. Together with HTML, they are one of the main langages for web development. They are mainly responsisble for the appearance and design of websites. It is not necessary to modify them for the purpose of this tutorial, but you can inform yourself about it on this tutorial.\nThe files with a “.qmd” extension are quarto files. This extension stands for Quarto MarkDown. They correspond to what the future pages of your website will be. They support various langages, like traditional Markdown or \\(\\LaTeX\\). We will change our portfolio pages by modifying these pages.\nThe files with a “.yml” extension are configuration files. We use them to set some rules that quarto will apply to generate our pages. For example, we will modify the navigation bar (or navbar) through our these files later in this chapter.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#the-preview-and-render-commands",
    "href": "2_quarto.html#the-preview-and-render-commands",
    "title": "2. Creating our content with Quarto",
    "section": "The preview and render commands",
    "text": "The preview and render commands\nQuarto allows us to create a properly designed website by only interacting with basic qmd files. We need however to see what results they yield.\nTo see the graphical result of our qmd files, we need to use two main commands : the quarto preview and quarto render commands.\nThe quarto preview command allows to see in real time what the changes we are bringing to our qmd and yml files yield. After entering it in the terminal console, it automatically opens a page on your default browser where you can see the graphical results of the latest saved version of your qmd and yml files. If there is an error with your files (for example a bad configuration within your yaml file), you won’t be able to see correctly the results, and an error message will pop-up. We usually use it at the beginning of a work session, when we bring change to our portfolio.\nThe quarto render command allows to create html and css files from our qmd and yml files. We usually use it at the end of a work session, when we are satisfied with the changes we brought to the our website. Essentially, it does the same as the preview command, without opening a browser to see your changes in real time.\nLet’s try to run the quarto preview command :\n\n\n\nRunning the quarto preview command on the vscode terminal.\n\n\nYou should briefly see some blue text “preparing to preview”, followed by the names of your qmd files, before your default browser automatically launches itself.\nIf you did not modify the basic files, you should see something like this on your web browser :\n\n\n\nThe graphical result of an empty quarto project.\n\n\nOkay, we have our first graphical results ! What happened exactly here ? First, you entered quarto preview. Quarto first transformed all your qmd files in your folder in readable files for you web browser, i.e. html and css files. Then, it opened those html and css files with your default browser. What you are seeing is the result of this conversion from qmd to html and css.\n\nNote : You can notice that the URL of your page looks a bit different from normal websites you access. Indeed, you should have something like “http://localhost:6986/”, or any other kind of four numbers combination. This is because quarto is currently watching at your file, and will refresh the page as soon as any of your qmd or yaml files are changed and saved. Without entering into the details, “localhost” means that it is your computer, and the four numbers are the port of your computer quarto is using to display the files.\n\n\nNote : Now, your terminal is busy reading your files in the web browser. You can create a new terminal session by clicking on the “+” in vscode. To stop the process, you can click on your terminal and then enter ctrl+c (command+c for MacOS keyboards).",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#how-to-modify-our-content",
    "href": "2_quarto.html#how-to-modify-our-content",
    "title": "2. Creating our content with Quarto",
    "section": "How to modify our content",
    "text": "How to modify our content\nNow that we rendered the first version of our page, how do we modify its content ?\nIf we want to modify the homepage of our website, we can go to the index.qmd file, and change directly the text. By default, Quarto should have filled the document with :\n---\ntitle: \"Home\"\n---\n\nThis is a Quarto website.\n\nTo learn more about Quarto websites visit &lt;https://quarto.org/docs/websites&gt;.\nThat yields the previous image.\nWe can modify it by writting for example :\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year\nstudent of the Master of Research in Economics at Sciences Po. \nMy research interests are environmental economics. \n\nFeel free to reach out to me at my email adress :\n\"paulo.gugelmocavalheirodias\" followed by \"@sciencespo.fr\" !\n\nThis should yield :\n\n\n\nBasic index page.\n\n\n\nNote : you should usually avoid putting your entire email adress directly in your webpage. Some bots are constantly scrapping webpages to get potential email adress that are later on the target of spam or fraudulous emails.\n\nAs you see, the changes are pretty straightforward. Since qmd files are basically a form of markdown file, you can use the markdown syntax for your content. If you are not familiar with it, it is easy to understand. I encourage you to go check some documentation.\nFor plain text, note that you can enter jumplines without actually rendering a jumpline. If you want to do a breakline, you should let at least one empty line between two text chunks.\nWe are now going to cover some features of markdown.\n\nTitles and subtitles\nIf you write plain text in your qmd file, you will get normal text in your page. However, if you want to have titles and subtitles, you can use the # sign before it.\nIn this way, one # will yiel a title, two # a subtitle, etc., until the sixth level. With text filler, we could write the following code :\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year student of\nthe Master of Research in Economics at Sciences Po. \nMy research interests are environmental economics. \n\nFeel free to reach out to me at my email adress : \"paulo.gugelmocavalheirodias\"\nfollowed by \"@sciencespo.fr\" !\n\n# Title \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris \nnisi ut aliquip ex ea commodo consequat.\n\n## A Subtitle \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris \nnisi ut aliquip ex ea commodo consequat.\n\n### A subsubtitle \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris \nnisi ut aliquip ex ea commodo consequat.\nThis would then yield :\n\n\n\nExample of titles and subtitles.\n\n\nIt is as simple as that, and by default, Quarto creates a table of content automatically for us in the right-side of our page !\n\n\nAdding links\nNow, if we want to add some link to our text, we are going to use the [text](link) markdown syntax. Concretely, the text will be between square brackets [], and the link we want between parenthesis ().\nFor example this code :\n\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year student\nof the\n[Master of Research in Economics](https://www.sciencespo.fr/ecole-recherche/en/academics/masters/master-economics/)\nat [Sciences Po](https://www.sciencespo.fr/en/). \nMy research interests are environmental economics and open source !\n\nFeel free to reach out to me at my email adress :\n\"paulo.gugelmocavalheirodias\" followed by \"@sciencespo.fr\" !\nwill yield :\n\n\n\nExample of links usage.\n\n\nAnd if you click on the links in your browser, you should be redirected to the url you wrote !\n\n\nAdding documents and pictures\nNow, we could also want to include some pictures in our text. For example, some pdf of a long article we wrote or screeenshots.\nIn order to do so, we are going to use the ![description](link) markdown syntax.\nIn the previous example, we had url as links, that could be accessed on internet. Now, let’s imagine that you have a pdf file in your computer that you want to share on your portfolio. Usually, such a pdf is not available online on a public url.\nTHe first step we want to do is put the files you want to share in your folder in vscode. You should have something like that :\n\n\n\nA vscode folder with files that you want to share.\n\n\nNote that in the left side of my screen, in the explorer bar, I now have to additional files : “screenshot.png” and “2_8_markdown_guide.pdf”.\nIf we want to include them, we could write :\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year student\nof the\n[Master of Research in Economics](https://www.sciencespo.fr/ecole-recherche/en/academics/masters/master-economics/)\nat [Sciences Po](https://www.sciencespo.fr/en/). \nMy research interests are environmental economics and open source !\n\nHere is an interesting website :\n\n![A screenshot of the CRAN website.](screenshot.png)\n\nHere is an interesting guide : \n\n![This is the Markdown guide, written by Matt Cone.](2_8_markdown_guide.pdf)\n\nFeel free to reach out to me at my email adress :\n\"paulo.gugelmocavalheirodias\" followed by \"@sciencespo.fr\" !\nThis code would yield :\n\n\n\nAn attempt to include pictures and pdf\n\n\nWe see that the picture, a screenshot of the CRAN website, seems to work fine. However, the markdown guide, written by Matt Cone, and available here, is displayed in a smaller dimension than the page. This is due to the fact that we are trying to include a pdf as a picture. To include a pdf, we can thus use the normal link syntax, while directing to the emplacement of our pdf file. In this way, a syntax similar to You can read the markdown guide of Matt Conen [by clicking on this link](2_8_markdown_guide.pdf) would work better. We could thus write :\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year student\nof the\n[Master of Research in Economics](https://www.sciencespo.fr/ecole-recherche/en/academics/masters/master-economics/)\nat [Sciences Po](https://www.sciencespo.fr/en/). \nMy research interests are environmental economics and open source !\n\nHere is an interesting website :\n\n![A screenshot of the CRAN website.](screenshot.png)\n\nYou can read the markdown guide of Matt Conen [by clicking on this link](2_8_markdown_guide.pdf)\n\nFeel free to reach out to me at my email adress :\n\"paulo.gugelmocavalheirodias\" followed by \"@sciencespo.fr\" !\nThat would yield :\n\n\n\nIncluding a pdf document through a local link.\n\n\nAnd if we click on the link, we are redirected to the pdf file within our browser.\nFor the case of a portfolio, we could for example include our CV in this fashion.\n\n\nAdding code\nNow, we might want to include code snippets in our portfolio. For example, we have a project for which we wrote in R or any other languages, and we want to make the code easily accessible by our visitors.\nIn order for us to do that, we have two options. Either we want to include code inline, in which way we write our code between those reversed ticks (or “backticks”) : ``, or we want to include a code snippet, that has several lines, in which case we write three reversed ticks at the beginning and at the end of our code like this :\n```{r}\nprint(\"Hello world !\")\n```\nThe code will yield :\n\nprint(\"Hello world !\")\n\n[1] \"Hello world !\"\n\n\nWe are here touching one of the biggest strength of Quarto. Despite being a “simple” static website generator, it allows us to include and execute code in our page. This can be very useful to display work that requires data treatment and/or other statistical computations.\nFor example, the following code in R :\n```{r}\ndata(iris) # load the freely accessible dataset named \"iris\"\nsummary(iris) # display a simple statistical summary of this dataset\nmodel = lm(iris$Sepal.Length ~ iris$Petal.Length)\n# create a linear model trying to explain the sepal length by the petal length\n\nplot(x = iris$Petal.Length,\n  y = iris$Sepal.Length, \n  xlab = \"Petal Length\",\n  ylab = \"Sepal Length\") # plot those two variables\nabline(model) # draw the linear regression line on the plot\n```\nWill generate :\n\ndata(iris) # load the freely accessible dataset named \"iris\"\nsummary(iris) # display a simple statistical summary of this dataset\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\nmodel = lm(iris$Sepal.Length ~ iris$Petal.Length)\n# create a linear model trying to explain the sepal length by the petal length\n\nplot(x = iris$Petal.Length,\n  y = iris$Sepal.Length, \n  xlab = \"Petal Length\",\n  ylab = \"Sepal Length\") # plot those two variables\nabline(model) # draw the linear regression line on the plot\n\n\n\n\n\n\n\n\nIf you don’t use R, don’t worry, Quarto also support several other languages, such as Python, Julia, and Observable JavaScript. In theory, if you know how to deal with code engine, you can also run other languages on Quarto.\n\n\nAdding math\nFinally, if you want to add some math to your website, it is also possible. Indeed, markdown supports \\(\\LaTeX\\), so if you are already familiar with it, you can simply include your \\(\\LaTeX\\) code between dollar signs $ some math $ to generate inline math, or between two dollar signs $$ an equation $$to generate math blocks.\nFor example, the following code :\n\nThe arithmetic mean $\\bar{x}$ is defined as : \n\n$$\n\\bar{x}=\\frac{1}{N}\\sum_{i=1}^{N}x_{i}\n$$\nwill produce :\nThe arithmetic mean \\(\\bar{x}\\) is defined as :\n\\[\n\\bar{x}=\\frac{1}{N}\\sum_{i=1}^{N}x_{i}\n\\]\nIf you are not familiar with \\(\\LaTeX\\) and will be in positions where you have to write documents with math in it, I highly recommend you familiarizing yourself with it. The Overleaf website is a good place to start, and this guide here is very complete.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#how-to-modify-the-navigation-bar",
    "href": "2_quarto.html#how-to-modify-the-navigation-bar",
    "title": "2. Creating our content with Quarto",
    "section": "How to modify the navigation bar",
    "text": "How to modify the navigation bar\nNow that we are more proefficient in the generation of content, we can talk about the aspect of our portfolio.Without being website designers, we can recognize that an essential element of any website is the navigation bar. In Quarto, it is automatically displayed in all your pages, and you can only modify it in your _quarto.yml file. By default, you should have something similar to this :\nproject:\n  type: website\n\nwebsite:\n  title: \".\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nThat yields a navbar like :\n\n\n\nThe default navbar of Quarto\n\n\nIn this example, the content of the navigation bar, or “navbar”, are determined by all elements following the navbar element in the website list. Here, we see that it has two elements : the homepage, defined as the index.qmd file, and the about page, defined as the about.qmd file.\nNormally, the title of you page should appear in your browser, despite not being specified in your navbar. This is the default setting of Quarto. To unable this option, you can add title: false in your navbar list :\nwebsite:\n  title: \".\"\n  navbar:\n    title: false\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nThis should yield :\n\n\n\nA navbar without title.\n\n\nYou may however want to keep it. in this case, it should be better to modify the title of your webpage to a customed one, like your name. For example :\nwebsite:\n  title: \"Paulo Gugelmo Cavalheiro Dias\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nNow, to add a new page to your navbar, you can add an element in the left or right list such as :\nwebsite:\n  title: \"Paulo Gugelmo Cavalheiro Dias\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - projects.qmd\n      - about.qmd\nFor this configuration to work, you must first create a projects.qmd file beforehand in your folder. This will then implement a new link in the navbar, displayed in its left part, having for name the title of the file, i.e. here Projects :\n---\ntitle: \"Projects\"\n--- \n\nWelcome to my projects webpage. You will find here a list of ongoing or past projects I worked on. \nIf we now combine the two mentioned code, we should have something like :\n\n\n\n\n\n\n\n\n\nOur vscode interface.\n\n\n\n\n\n\n\nThe graphical result.\n\n\n\n\n\n\nAdding a new document to the navbar",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#further-resources",
    "href": "2_quarto.html#further-resources",
    "title": "2. Creating our content with Quarto",
    "section": "Further resources",
    "text": "Further resources\nAt this point, we should have the basics of Quarto. Although not complete, our portfolio is functional. If you wish to dive further into the personalization of your website (which is probably the case), you can spend more time reading their documentation, which is mentioned in the next paragraph.\nQuarto is a very powerful tool. We can use it to quickly produce content and maintain it with the presented workflow in this tutorial. I highly recommend the reading of their documentation here, and more specifically to follow through their Get Started guide.\n\n\n\nInstallation page of Quarto\nCreation of a project with Quarto\nRunning the quarto preview command on the vscode terminal.\nThe graphical result of an empty quarto project.\nBasic index page.\nExample of titles and subtitles.\nExample of links usage.\nA vscode folder with files that you want to share.\nAn attempt to include pictures and pdf\nIncluding a pdf document through a local link.\nThe default navbar of Quarto\nA navbar without title.\nOur vscode interface.\nThe graphical result.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  }
]