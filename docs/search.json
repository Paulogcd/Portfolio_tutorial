[
  {
    "objectID": "3_publish_with_github_pages.html",
    "href": "3_publish_with_github_pages.html",
    "title": "3. Publish your website with Github Pages",
    "section": "",
    "text": "Congratulations for having made it so far ! Now that we have a decent-looking basis for our online portfolio, we are ready to make it available to the real world. In order for us to publish our content, we are going to use GitHub pages, a website hosting service of GitHub.\nThis final step is the easiest one, so hang it on, we are soon reaching the end of this tutorial.",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "3_publish_with_github_pages.html#activating-github-pages",
    "href": "3_publish_with_github_pages.html#activating-github-pages",
    "title": "3. Publish your website with Github Pages",
    "section": "Activating GitHub pages",
    "text": "Activating GitHub pages\nIn order for us to publish the content that is available in our _site folder, we need first to goto our GitHub repository, and to click on settings at the top-right. We then click in the “Code and automation” on the “Pages” section. You should see something like this :\n\n\n\nAdd image\n\n\nWe are now going to activate GitHub Pages, and select “Deploy from a branch” for the Source. We are then going to select the folder from which GitHub Pages publishes our website. In our case, it is the “_quarto” folder. The branch from which it selects the folder should be “main” or “master” (but could have another name) depending on your git configuration. After selecting it, you can click on “Save” :\n\n\n\nAdd image\n\n\nYou can then go to https://username.github.io, with your actual GitHub username instead of “username”. After a few minutes, it should be on. Congratulations, you have published your portfolio !",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "1_git_and_github.html",
    "href": "1_git_and_github.html",
    "title": "1. Introduction to Git and GitHub",
    "section": "",
    "text": "In this first chapter, you will learn the basics on how to use Git and GitHub on Visual Studio Code.",
    "crumbs": [
      "Home",
      "1. Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "1_git_and_github.html#summary",
    "href": "1_git_and_github.html#summary",
    "title": "1. Introduction to Git and GitHub",
    "section": "",
    "text": "In this first chapter, you will learn the basics on how to use Git and GitHub on Visual Studio Code.",
    "crumbs": [
      "Home",
      "1. Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "1_git_and_github.html#introduction",
    "href": "1_git_and_github.html#introduction",
    "title": "1. Introduction to Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\nThis tutorial aims to give you the tools to easily and efficiently create, manage and publish your own online portfolio. In order to do that, we use several tools, such as Visual Studio Code, Git, GitHub, and Quarto. To understand why we use them, it is important to understand what Internet is. Internet can be understood as a network of computers that can communicate with each other. In the same way, a website can be understood as content that can be accessed over the internet. Thus, this tutorial will first focus on the design of the website, and then on the publication of the website.\nUsually, one shoul learn HTML5 and CSS to know a bit of Web development. However, in the recent years, a lot of static website generator have emerged, that make the conception of websites easier. Among the several static website generator, Jekyll, Zola, Hugo, and Quarto can be cited, but they are far from being the only ones. This tutorial focuses on Quarto in the second chapter.\nAfter having designed your website with a static website generator, we finally have to make it available to the world, i.e. publish it. Several free hosting services exist, such as Netlify, Quarto Pub, and GitHub Pages, among other ones. This tutorial focuses on GitHub Pages in the third chapter.\nNow, in order to make the whole process easier and fluid, this tutorial first focuses on the establishment of a workflow using Visual Studio Code, Git and GitHub. This workflow allows to make the second and third steps easier, and is also very useful if you are to work in collaborative projects in the future. This is thus the first chapter of this tutorial.\nThe first chapter is longer than the other two, so once you are done with it, the rest will be a lot easier.",
    "crumbs": [
      "Home",
      "1. Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "1_git_and_github.html#visual-studio-code",
    "href": "1_git_and_github.html#visual-studio-code",
    "title": "1. Introduction to Git and GitHub",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nVisual Studio Code (VSC or vscode) is a software to write code, also called Integrated Development Environment (IDE). It is largely used, and a lot of extensions exist to customize your experience with it. We are thus going to install vscode here.\n\n\n\nDowload page of vscode.\n\n\nThe strength of vscode comes mainly from the way it manages folders, in which several files of the same project exist. Now, we are going to create a folder in which we are going to develop our online portfolio. It is better if you name it “username.github.io”, with instead of “username” the pseudonym you are thinking of using in GitHub. It will be useful in the future parts of the tutorial. In my case, I will chose to illustrate it with the username “frpgcd”, thus naming my folder “frpgcd.github.io”.\nOnce it is done, we can use vscode to open this same folder. To do so, we open vscode, click on “open” in the starting page, and select your folder.\n\n\n\nStarting page of vscode. Click on “open” to chose a folder to open.\n\n\nNow that you selected your folder, vscode opened it and you should have something like that :\n\n\n\nAn empty folder opened with vscode.\n\n\n\nNOTE : When you open a folder for the first time, vscode may ask you “Do you trust the authors of the files in this folder?”. Since you just created your folder and that it is empty, you can naturally click on yes. You are the author !\n\nIt’s done ! We settled vscode correctly for the next step : initializing git in vscode.",
    "crumbs": [
      "Home",
      "1. Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "1_git_and_github.html#basics-of-git",
    "href": "1_git_and_github.html#basics-of-git",
    "title": "1. Introduction to Git and GitHub",
    "section": "Basics of Git",
    "text": "Basics of Git\nGit is a software that allows for version management, i.e. it is a version control system. Simply put, it is a software that allows you to make a logbook of all the changes in your files. You want to check all the steps from the very beginning of your project until the current version ? If you use git, it is possible.\n\nNote : Git does not only work with code files, but also with any type of file. If you have a text file (like a Master thesis for example…) for which you want to control the different versions, you can use git for it !\n\nThe first step is to install Git from here.\n\n\n\nThe installation page of git.\n\n\nOnce it is done, you can go back to vscode and go the research bar at the top and enter “&gt;Terminal: Create New Terminal”. This will pop-up a terminal console in vscode.\n\n\n\nHow to create a new terminal on vscode.\n\n\nThis should normally generate a console at the bottom of vscode, where your username, the name of your computer, adn/or the name of our current folder could appear :\n\n\n\nTerminal in vscode.\n\n\nSimply put, the terminal allows to textually communicate with your machine, instead of graphically, like it is usually the case. Having a terminal opened in vscode makes it possible to manipulate the current opened folder more easily. This is also how we are going to use Git.\n\nNote : This tutorial does not focus on what a terminal is, what shell, bash or any kind of line command are and do. However, it would be very useful for you to know how to use the basics of it. Further resources are available at the end of this page, and I strongly encourage you to check them, especially the first four chapters of Florian Oswald’s lecture on the shell.\n\nNow, to understand how to use Git, we need to take a step back, and have in mind the four main steps of our workflow :\n\nFirst, we have to initialise git in a folder. This will create a folder with a .git extension in our current folder, that will be the logbook.\nSecond, we have to choose which files we track with git. The changes of the tracked files will be registered in the .git folder.\nWe can now work on our files. Once we want to save the changes of the files, we ‘add’ the modified files to the logbook.\nFinally, we have to describe the changes. Without descriptions, the changes won’t be saved in the logbook. To describe the changes, we write a ‘commit’ in the logbook.\n\nConcretely, if we come back to vscode :\n\nWe write git init in the terminal console to initialise a git folder. This create a hidden folder inside of our folder, named .git. You must not necessarily see it to use git.\nWe then click on “new file” on vscode, for example a text-file. We write something in it, and save it as text.txt.\nWe begin tracking this file with git, using git add text.txt.\nWe describe our action using git commit -m \"Adding a text file.\".\n\nAt this point, you should have something like that :\n\n\n\nInitializing git, adding a file, and commiting its change.\n\n\nAt any point, we can use some other git commands to have more information. For example :\n\ngit status informs us about which files in our folder are being tracked, and what modifications are not yet registered.\ngit log gives back the logbook, i.e. the list of changes that were saved.\ngit diff gives the differences between the current version of your files and the latest version saved in the logbook.\n\nFinally, it is also useful to set up a branch. Without entering into too much details, a branch is the path in which you are registering all your commits and files. If you create another branch, then, it would mean . It is important to set up a main branch, in order for git not to bug in future operations. In order to do so, we can enter : git branch -M main in the terminal.\nGit is a very powerful tool that allows to do a lot of collabortive code managing, but we choose here to mainly exploit one of its features : remote synchronization. In addition to having this local logbook on your computer, you can indeed also send your files to a remote server, in a similar way than the cloud or a remote drive. This is where GitHub enters into play.",
    "crumbs": [
      "Home",
      "1. Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "1_git_and_github.html#basics-of-github",
    "href": "1_git_and_github.html#basics-of-github",
    "title": "1. Introduction to Git and GitHub",
    "section": "Basics of GitHub",
    "text": "Basics of GitHub\nGitHub is a firm (currently owned by Microsoft) that puts at disposition servers which you can use to store your data. It has a lot of different uses, including collaborative coding, but this tutorial only focuses on how to use it to manage your project with Git and Quarto. It is widely used in the programming community and is also sometimes referred as the social network of developers.\nTo use GitHub, the first step is to go to GitHub and create an account. Once your account is created, you can create a repository, named “username.github.io”, replacing “username” with your actual user name. Since I choose the username frpgcd, I will create in the example a repository name “frpgcd.github.io”.\n\n\n\nClick on the green button “Create a repository”.\n\n\n\n\n\nStarting page of the repository creation process.\n\n\n\n\n\nPage of the repository creation process filled with information.\n\n\n\nNote : During the creation process of a repository, you are asked for a license. It is important to chose one, because without it, the most restrictive policy applies. After a quick research, it seems that the Creative Commons BY-NC-ND 4.0 Deed license should cover all the cases we need for an online academic portfolio. It is very permissive, but requires citation (“appropriate credit”), does not allows for commercial uses and derivatives. If your needs are different, it is worth looking into different kinds of license to see which one is better for your own usage.\n\nOnce it is done, we can go back to vscode, to add a connection between our local folder and the remote repository we just created. In order to do that, we first have to configurate git.\n\nEnter git config --global user.name \"Your Name\", replacing “Your Name” with the name of your choice. It doesn’t have to be the same as your GitHub user name.\nEnter git config --global user.email \"your@mail.com\", replacing “your@mail.com” with the email of your choice. Note that it does not require you to actually own this email adress.\nThen, we have to add a ssh key to our GitHub account. An ssh key allows you to communicate to GitHub from your computer. Enter ssh-keygen -t ed25519 -C \"your@email.com\", replacing “your@email” with your actual email. Your terminal will ask for a passphrase, but it’s better for simplicity purposes to not enter anything, and just press the enter key on your keyboard.\n\nIn my case, my first name is Paulo and my last is Gugelmo Cavalheiro Dias, and I choose the username “frpgcd” for demonstration purposes, I would then enter in my Terminal console :\ngit config --global user.name \"frpgcd\"\ngit config --global user.email \"frpgcd@mail.com\"\nssh-keygen -t ed25519 -C \"frpgcd@email.com\"\n\n\nNow, we are going to use this key to establish a connection with GitHub. On your terminal, you can enter cat ~/.ssh/id_ed25519.pub or open ~/.ssh/id_ed25519.pub, and it will give you back a character string beginning with “ssh-ed22519”. Go to your GitHub account, click on your profile picture at the top right of the website, choose “settings”, then click on “ssh and gpg keys”, then on “add new ssh key”, choose the title you want (for example the name of your current computer), and in “key”, add the value your terminal gave back to you. You should be connected !\n\n\n\n\nIn your settings, find the ssh and gpg keys section.\n\n\n\n\n\nAfter having clicked on “New SSH Key”, you can add what you get from your terminal after entering “cat ~/.ssh/id_ed25519.pub” in the “Key” section.\n\n\n\nNote : You should not share your ssh keys to the public. It could jeopardize the safety of your data and access to the distant repository.\n\n\nNow that your GitHub account is connected to your computer, we have to connect your local folder to a repository. Go on your repository, and copy the text it gives you in the SSH section (it should be something like “git@github.com:username/name_of_the_repository.git”). In your vscode terminal, with your folder open, you can then enter : git remote add origin git@github.com:username/name_of_the_repository.git. The connection between your local folder and the distant repository should be established.\nWe can “push” the content of our local folder to our remote folder. This is a command that we use once all the changes are commited in our logbook to send all the information in the remote server. To be able to push correctly, you first enter git push -u origin main, and then you can just enter git push for the next times, when your changes are added and commited.\n\nIn my case, I have, with the username “frpgcd” and the repository “frpgcd.github.io” :\ngit remote add origin git@github.com:frpgcd/frpgcd.github.io.git\ngit push -u origin main\n\nNote : You can also initialise a git folder in another directory, and “clone” an existing GitHub repository. This will create a duplicate of this repository in your folder and on your GitHub account, or just load the data locally if it is one of your repositories. Although this is not covered in the current tutorial, you can check the Github and Git documentations to get more information on those operations.",
    "crumbs": [
      "Home",
      "1. Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "1_git_and_github.html#use-git-and-github-together",
    "href": "1_git_and_github.html#use-git-and-github-together",
    "title": "1. Introduction to Git and GitHub",
    "section": "Use Git and GitHub together",
    "text": "Use Git and GitHub together\nNow that the connection between your local folder and your distant repository has been created, you can add modifications to your folder (like creating a new file), add those changes via git add followed by the name of your new document (you can also use * to select everything in your folder), commit those changes via git commit -m \"the description of your changes\", and then push those changes via git push. This add-commit-push process is one of the basics to synchronize your local folder with the files of your GitHub account.\nFor example, if we want to create a new file, named “new_file.txt”, to enter some text in it, to save it and to track it with git, and then to send it to our distant GitHub repository, we would do, after saving the file :\ngit add new_file.txt\ngit commit -m \"Adding a new file.\"\ngit push\nYou can then verify that your changes have been taken into account by going on the website of GitHub, on your repository. Your tracked files should appear there.",
    "crumbs": [
      "Home",
      "1. Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "1_git_and_github.html#further-resources",
    "href": "1_git_and_github.html#further-resources",
    "title": "1. Introduction to Git and GitHub",
    "section": "Further Resources",
    "text": "Further Resources\nYou are now ready to proceed to the second chapter, that treats content generation with Quarto. However, if you wish to dive deeper into the tools presented in this first chapter, and try to understand better Git, GitHub, or even the Terminal and Visual Studio Code, you might be tempted to look at additional material. First of all, for all that has been covered in this tutorial, I recommend the lecture of Florian Oswald about git and github, available at https://floswald.github.io/ScPoProgramming/05-git.html. For more specific questions, you might find the following resources useful :\nAbout vscode :\n\nThe official documentation of vscode, available at : https://code.visualstudio.com/docs\n\nAbout the terminal :\n\nThe first four sessions of the Florian Oswald lecture, available at : https://floswald.github.io/ScPoProgramming/\nA general tutorial about the command line, including resources for Windows, MacOS, and Linux, available at : https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\nThe vscode documentation about the terminal inside vscode, that might require some prior knowledge about the command line, available at : https://code.visualstudio.com/docs/terminal/basics\n\nAbout git :\n\nThe official documentation of git, availbale at : https://git-scm.com/doc\nThe w3school tutorial for git, available at : https://www.w3schools.com/git/\n\nAbout github :\n\nThe official tutorial of github on using git and github together, available at : https://docs.github.com/en/get-started/start-your-journey",
    "crumbs": [
      "Home",
      "1. Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research student portfolio tutorial",
    "section": "",
    "text": "This tutorial is currently going under construction. All chapters and sections are not finished.\nYou don’t have much time and are not proefficient in web development, but you would like to have a portfolio to share your work ? Welcome to this research student portfolio tutorial !",
    "crumbs": [
      "Home",
      "Research student portfolio tutorial"
    ]
  },
  {
    "objectID": "index.html#objective-of-this-tutorial",
    "href": "index.html#objective-of-this-tutorial",
    "title": "Research student portfolio tutorial",
    "section": "Objective of this tutorial",
    "text": "Objective of this tutorial\n\nThis simple tutorial aims at giving the right tools to any students who want to publish and maintain their portfolio in a quick and efficient way.\nIt requires no prior programming experience.\nYou can find all the material and code of this tutorial on this Github repository.",
    "crumbs": [
      "Home",
      "Research student portfolio tutorial"
    ]
  },
  {
    "objectID": "index.html#structure-and-material",
    "href": "index.html#structure-and-material",
    "title": "Research student portfolio tutorial",
    "section": "Structure and material",
    "text": "Structure and material\nThis tutorial is divided in three main chapters :\n\nBasics with visual studio code and git\nBasics with quarto\nQuickly publishing your own portfolio with github page\n\nThose three chapters are available on slides or on more detailed pages.\n\n\n\nChapter\nDescription\nSlides\n\n\n\n\n1. Git and Github with Visual Studio Code\nIn this first chapter, you will learn how to use Git and GitHub with Visual Studio Code. This serves to setup the workflow that will be used in the rest of the tutorial.\nYou can find the slides of this chapter here.\n\n\n2. Create your content with Quarto\nIn this chapter, you will learn to generate web content with Quarto, and to easily modify and maintain it. This chapter serves to create the content of your portfolio you will later publish.\nYou can find the slides of this chapter here.\n\n\n3. Publish your website with GitHub Pages\nIn this final chapter, you will learn how to publish your website, i.e. make it accessible to everyone on the internet. We use the publishing service GitHub Pages and show how to quickly update your website with the previous presented tools.\nYou can find the slides of this chapter here.",
    "crumbs": [
      "Home",
      "Research student portfolio tutorial"
    ]
  },
  {
    "objectID": "index.html#further-resources",
    "href": "index.html#further-resources",
    "title": "Research student portfolio tutorial",
    "section": "Further resources",
    "text": "Further resources\nThis tutorial is mainly based on the great documentation of quarto and on the Florian Oswald class, Associate Professor of Economics at Sciences Po in Paris, and my teacher to introduction to programming.",
    "crumbs": [
      "Home",
      "Research student portfolio tutorial"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the website of a tutorial for quick and simple maintanable portfolio websites with Quarto.\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "2_quarto.html",
    "href": "2_quarto.html",
    "title": "2. Introduction to Quarto",
    "section": "",
    "text": "Now that we know how to use Git and Github together, it is time for us to use Quarto.",
    "crumbs": [
      "Home",
      "2. Introduction to Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#installation-of-quarto",
    "href": "2_quarto.html#installation-of-quarto",
    "title": "2. Introduction to Quarto",
    "section": "Installation of Quarto",
    "text": "Installation of Quarto\nThe first step of this chapter is to download Quarto here.\n\n\n\nInstallation page of Quarto",
    "crumbs": [
      "Home",
      "2. Introduction to Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#create-a-quarto-project",
    "href": "2_quarto.html#create-a-quarto-project",
    "title": "2. Introduction to Quarto",
    "section": "Create a Quarto project",
    "text": "Create a Quarto project\nThe second step is to create a quarto project in your folder (the one you synchronized with your online GitHub repository). In order to do that, you can go in vscode, and enter in the terminal quarto create. You will then be guided with several questions regarding the nature of the project you wish to create. For the purpose of creating a portfolio, I would recommend to choose to create a website.\n\n\n\nAdd image with the menu choices of quarto when creating a project.\n\n\nOnce the creation process is done, you will see appear in your folder several files : index.qmd, about.qmd, _quarto.yml, style.css.\nLet’s take a moment to see what they do :\n\nThe files with a “.css” extension are Cascading Style Sheets (css) files. Together with HTML, they are one of the main langages for web development. They are mainly responsisble for the appearance and design of websites. It is not necessary to modify them for the purpose of this tutorial, but you can inform yourself about it on this tutorial.\nThe files with a “.qmd” extension are quarto files. This extension stands for Quarto MarkDown. They correspond to what the future pages of your website will be. They support various langages, like markup or \\(\\LaTeX\\). We will modify our portfolio pages by modifying these pages.\nThe files with a “.yml” extension are configuration files. We use them to set some rules that quarto will apply to generate our pages. For example, we will modify the navigation bar (or navbar) through our .yml files later in this chapter.",
    "crumbs": [
      "Home",
      "2. Introduction to Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#the-preview-and-render-commands",
    "href": "2_quarto.html#the-preview-and-render-commands",
    "title": "2. Introduction to Quarto",
    "section": "The preview and render commands",
    "text": "The preview and render commands\nQuarto allows us to create a properly designed website by only interacting with basic qmd files. We need however to see what results they yield.\nTo see the graphical result, we need to use two main commands : the quarto preview and quarto render commands.\nThe quarto preview command allows to see in real time what the changes we are bringing to our qmd and yml files yield. After entering it in the terminal console, it automatically opens a page on your browser where you can see the graphical resutls. We usually use it at the beginning of a work session, when we bring change to our portfolio. For the changes to be actualised, you need to save your files.\nThe quarto render command allows to create html and css files from our qmd and yml files. We usually use it at the end of a work session, when we are satisfied with the changes we brought to the our website. Essentially, it does the same as the preview command, without opening a browser to see your changes in real time.",
    "crumbs": [
      "Home",
      "2. Introduction to Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#how-to-modify-the-general-appearance-of-our-pages",
    "href": "2_quarto.html#how-to-modify-the-general-appearance-of-our-pages",
    "title": "2. Introduction to Quarto",
    "section": "How to modify the general appearance of our pages",
    "text": "How to modify the general appearance of our pages\n\nTemplate\nTitle of pages\n\nNow that you entered quarto preview and that you can see the changes in real time, we can begin to change the content of your portfolio. First of all, the general appearance of our pages can be changed via the chosen template specified in the _quarto.yml file.",
    "crumbs": [
      "Home",
      "2. Introduction to Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#how-to-modify-our-content",
    "href": "2_quarto.html#how-to-modify-our-content",
    "title": "2. Introduction to Quarto",
    "section": "How to modify our content",
    "text": "How to modify our content\nNow that we have chosen the general appearance of our portfolio, we can modify the content of it.\nIf we want to modify the homepage of our website, we can go to the index.qmd file, and change directly the text. By default, Quarto should have filled the document with :\n---\ntitle: \"Home\"\n---\n\nThis is a Quarto website.\n\nTo learn more about Quarto websites visit &lt;https://quarto.org/docs/websites&gt;.\nThat yields, depending on your chosen template :\n\n\n\nAdd image with the menu choices of quarto when creating a project.\n\n\nWe can modify it by writting for example :\n---\ntitle: \"Home\"\n---\n\nHello, I am Jane Smith, currently a third year PhD Student in Economics at the Paris University, and this is my academic portfolio ! My research interests are mainly about urban economics and spatial inequalities. \n\nTo learn more about my work, visit &lt;https://parisuniversity.com/research_of_Jane_Smith&gt;.\n\ntext\nlinks\npages\npictures\nother documents",
    "crumbs": [
      "Home",
      "2. Introduction to Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#how-to-modify-the-navigation-bar",
    "href": "2_quarto.html#how-to-modify-the-navigation-bar",
    "title": "2. Introduction to Quarto",
    "section": "How to modify the navigation bar",
    "text": "How to modify the navigation bar\nAn essential element of the website is the navigation bar. In Quarto, it is automatically displayed in all your pages, and you can only modify it in your _quarto.yml file. Let’s take a look at it :\nproject:\n  type: website\n\nwebsite:\n  title: \"portfolio\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nIn this example, the content of the navigation bar, or “navbar”, are determined by all elements following the navbar element in the website list. Here, we see that it has two elements : the homepage, defined as the index.qmd file, and the about page, defined as the about.qmd file.\nNormally, the title of you page should appear in your browser, despite not being specified in your navbar. This is the default setting of Quarto. To unable this option, you can add title: false in your navbar list :\nwebsite:\n  title: \"portfolio\"\n  navbar:\n    title: false\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nThis should yield :\n\n\n\nAdd image\n\n\nTo add a new page to your navbar, you can add an element in the left or right list such as :\nwebsite:\n  title: \"portfolio\"\n  navbar:\n    title: false\n    left:\n      - href: index.qmd\n        text: Home\n      - project.qmd\n      - about.qmd\nFor this to work, you must have created a project.qmd file beforehand in your folder. This will then implement a new link in the navbar, displayed in its left part, having for name the name of file, i.e. here project :\n\n\n\nAdd image",
    "crumbs": [
      "Home",
      "2. Introduction to Quarto"
    ]
  }
]