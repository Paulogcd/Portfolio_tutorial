---
title: "1. Introduction to Git and GitHub"
---

## Summary 

- In this first session, you will learn the basics on how to use Git and GitHub on Visual Studio Code.
- You can find the slides of this session [here](./resources/slides/1/1_Basics_git_and_github.pdf).

## Introduction 

This tutorial aims to give you the tools to easily and efficiently create, manage and publish your own online portfolio.
In order to do that, we use several tools, such as Visual Studio Code, Git, GitHub, and Quarto. 
To understand why we use them, it is important to understand what Internet is. 
Internet can be understood as a network of computers that can communicate with each other. 
In the same way, a website can be understood as content that can be accessed over the internet. 
Thus, this tutorial will first focus on the design of the website, and then on the publication of the website. 

Usually, one shoul learn HTML5 and CSS to know a bit of Web development. However, in the recent years, a lot of static website generator have emerged, that make the conception of websites easier.
Among the several static website generator, Jekyll, Zola, Hugo, and Quarto can be cited, but they are far from being the only ones. This tutorial focuses on Quarto in the second session.

After having designed your website with a static website generator, we finally have to make it available to the world, i.e. publish it.
Several free hosting services exist, such as Netlify, Quarto Pub, and GitHub Pages, among other ones. This tutorial focuses on GitHub Pages in the third session.

Now, in order to make the whole process easier and fluid, this tutorial first focuses on the establishment of a workflow using Visual Studio Code, Git and GitHub.
This workflow allows to make the second and third steps easier, and is also very useful if you are to work in collaborative projects in the future.
This is thus the first session of this tutorial.

## Visual Studio Code

Visual Studio Code (VSC or vscode) is a software to write code, also called Integrated Development Environment (IDE).
It is largely used, and a lot of extensions exist to customize your experience with it. 
We are thus going to install vscode [here](https://code.visualstudio.com/).
 
![Dowload page of vscode.](./resources/images/1_install_vscode.png)

The strength of vscode comes mainly from the way it manages folders, in which several files of the same project exist.
Now, we are going to create a folder, named "portfolio" for example, in which we are going to develop our online portfolio. 

After it is done, we can use vscode to open this same folder. To do so, we open vscode, click on "open" in the starting page, and select your folder.

![Starting page of vscode. Click on "open" to chose a folder to open.](./resources/images/2_starting_page_vscode.png)

Now that you selected your folder, vscode opened it and you should have something like that : 

![An empty folder opened with vscode.](./resources/images/3_folder_opened_vscode.png)

> NOTE : When you open a folder for the first time, vscode may ask you "Do you trust the authors of the files in this folder?".
Since you just created your folder and that it is empty, you can naturally click on yes. You are the author !

It's done ! We settled vscode correctly for the next step : initializing git in vscode. 

## Basics of Git 

Git is a software that allows for version management, i.e. it is a version control system. 
Simply put, it is a software that allows you to make a logbook of all the changes in your files. 
You want to check all the steps from the very beginning of your project until the current version ?
If you use git, it is possible.

Note that this does not only work with code files, but also with any type of file.
If you have a text file (like a Master thesis for example...) for which you want to control the different versions, you can use git for it ! 

The first step is to install Git from [here](https://git-scm.com/). 

![The installation page of git.](./resources/images/4_install_git.png)

Once it is done, you can go back to vscode and go the research bar at the top and enter ">Terminal: Create New Terminal". This will pop-up a terminal console in vscode.

![How to create a new terminal on vscode.](./resources/images/5_create_new_terminal_vscode.png)

This should normally generate a console at the bottom of vscode, where your username and/or the name of your computer appear :

![Terminal in vscode.](./resources/images/6_terminal_vscode.png)

Simply put, the terminal allows to textually communicate with your machine, instead of graphically, like it is usually the case.
Having a terminal opened in vscode makes it possible to manipulate the current opened folder more easily. This is also how we are going to use Git.

> Note : This tutorial does not focus on what a terminal is, what shell, bash or any kind of line command are and do. However, it would be very useful for you to know how to use the basics of it. I strongly encourage you to check some material on it, such as the first four sessions of [Florian Oswald lecture](https://floswald.github.io/ScPoProgramming/) on the shell. 

Now, to use Git, we need to take a step back. 

First, we have to initialise git in a folder. This will create a .git folder in our current folder, that will be the logbook.
Second, we have to choose which files we track with git. The changes of the tracked files will be registered in the .git folder.
We can now work on our files. Once we want to save the changes of the files, we 'add' the modified files to the logbook. 
Third, we have to describe the changes. Without descriptions, the changes won't be saved in the logbook. To describe the changes, we write a 'commit' in the logbook.

Concretely, if we come back to vscode :  

1. We write `git init` in the terminal console to initialise a git folder.
2. We then click on "new file" on vscode, for example a text-file. We write something in it, and save it as `text.txt`.
3. We begin tracking this file with git, using `git add text.txt`. 
4. We describe our action using `git commit -m "Adding a text file."`.

At this point, you should have something like that :

![Initializing git, adding a file, and commiting its change.](./resources/images/7_basic_setup_git)

At any point, we can use some other git commands to have more information. For example : 

- `git status` informs us about which files in our folder are being tracked, and what modifications are not yet registered.
- `git log` gives back the logbook, i.e. the list of changes that were saved.
- `git diff` gives the differences between the current version of your files and the latest version saved in the logbook.

Git is a very powerful tool that allows to do a lot of collabortive code managing, but we choose here to mainly exploit one of its features : remote synchronization. 
In addition to having this local logbook on your computer, you can indeed also send your files to a remote server, in a similar way than the cloud or a remote drive.
This is where GitHub enters into play. 

## Basics of GitHub

GitHub is a firm (currently owned by Microsoft) that puts at disposition servers with which you can use git to sotre your data remotely.
It is widely used in the programming community and is also sometimes referred as the social network of developers.

To use GitHub, the first step is to go to [GitHub](https://github.com) and [create an account](https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home). 

![The account creation page of GitHub](./resources/images/8_account_creation_page_github)

## Use Git and GitHub together 

