---
title: "1. Introduction to Git and GitHub"

execute:
  echo: false
---


{{< include warning.qmd >}}

## Summary 

- In this first chapter, you will learn the basics on how to use Git and GitHub on Visual Studio Code.

## Introduction 

This tutorial aims to give you the tools to easily and efficiently create, manage and publish your own online portfolio.
In order to do that, we use several tools, such as Visual Studio Code, Git, GitHub, and Quarto. 
To understand why we use them, it is important to understand what Internet is. 
Internet can be understood as a network of computers that can communicate with each other. 
In the same way, a website can be understood as content that can be accessed over the internet. 
Thus, this tutorial will first focus on the design of the website, and then on the publication of the website. 

Usually, one shoul learn HTML5 and CSS to know a bit of Web development. However, in the recent years, a lot of static website generator have emerged, that make the conception of websites easier.
Among the several static website generator, [Jekyll](https://jekyllrb.com/), [Zola](https://www.getzola.org/), [Hugo](https://gohugo.io/), and [Quarto](https://quarto.org/) can be cited, but they are far from being the only ones. This tutorial focuses on Quarto in the second chapter.

After having designed your website with a static website generator, we finally have to make it available to the world, i.e. publish it.
Several free hosting services exist, such as [Netlify](https://www.netlify.com/), [Quarto Pub](https://quartopub.com/), and [GitHub Pages](https://pages.github.com/), among other ones. This tutorial focuses on GitHub Pages in the third chapter.

Now, in order to make the whole process easier and fluid, this tutorial first focuses on the establishment of a workflow using Visual Studio Code, Git and GitHub.
This workflow allows to make the second and third steps easier, and is also very useful if you are to work in collaborative projects in the future.
This is thus the first chapter of this tutorial.

The first chapter is longer than the other two, so once you are done with it, the rest will be a lot easier.

## Visual Studio Code

Visual Studio Code (VSC or vscode) is a software to write code, also called Integrated Development Environment (IDE).
It is largely used, and a lot of extensions exist to customize your experience with it. 
We are thus going to install vscode [here](https://code.visualstudio.com/).
 
![Dowload page of vscode.](./resources/images/1_1_install_vscode.png)

The strength of vscode comes mainly from the way it manages folders, in which several files of the same project exist.
Now, we are going to create a folder in which we are going to develop our online portfolio. It is better if you name it "username.github.io", with instead of "username" the pseudonym you are thinking of using in GitHub. It will be useful in the future parts of the tutorial. In my case, I will chose to illustrate it with the username "frpgcd", thus naming my folder "frpgcd.github.io".

Once it is done, we can use vscode to open this same folder. To do so, we open vscode, click on "open" in the starting page, and select your folder.

![Starting page of vscode. Click on "open" to chose a folder to open.](./resources/images/1_2_starting_page_vscode.png)

Now that you selected your folder, vscode opened it and you should have something like that : 

![An empty folder opened with vscode.](./resources/images/1_3_folder_opened_vscode.png)

> NOTE : When you open a folder for the first time, vscode may ask you "Do you trust the authors of the files in this folder?". Since you just created your folder and that it is empty, you can naturally click on yes. You are the author !

It's done ! We settled vscode correctly for the next step : initializing git in vscode. 

## Basics of Git 

Git is a software that allows for version management, i.e. it is a version control system. 
Simply put, it is a software that allows you to make a logbook of all the changes in your files. 
You want to check all the steps from the very beginning of your project until the current version ?
If you use git, it is possible.

> Note : Git does not only work with code files, but also with any type of file. If you have a text file (like a Master thesis for example...) for which you want to control the different versions, you can use git for it ! 

The first step is to install Git from [here](https://git-scm.com/). 

![The installation page of git.](./resources/images/1_4_install_git.png)

Once it is done, you can go back to vscode and go the research bar at the top and enter ">Terminal: Create New Terminal". This will pop-up a terminal console in vscode.

![How to create a new terminal on vscode.](./resources/images/1_5_create_new_terminal_vscode.png)

This should normally generate a console at the bottom of vscode, where your username, the name of your computer, adn/or the name of our current folder could appear :

![Terminal in vscode.](./resources/images/1_6_terminal_vscode.png)

Simply put, the terminal allows to textually communicate with your machine, instead of graphically, like it is usually the case. Having a terminal opened in vscode makes it possible to manipulate the current opened folder more easily. This is also how we are going to use Git.

> Note : This tutorial does not focus on what a terminal is, what shell, bash or any kind of line command are and do. However, it would be very useful for you to know how to use the basics of it. Further resources are available at the end of this page, and I strongly encourage you to check them, especially the first four chapters of [Florian Oswald's lecture](https://floswald.github.io/ScPoProgramming/) on the shell. 

Now, to understand how to use Git, we need to take a step back, and have in mind the four main steps of our workflow :

1. First, we have to initialise git in a folder. This will create a folder with a `.git` extension in our current folder, that will be the logbook.
2. Second, we have to choose which files we track with git. The changes of the tracked files will be registered in the `.git` folder.
3. We can now work on our files. Once we want to save the changes of the files, we 'add' the modified files to the logbook. 
4. Finally, we have to describe the changes. Without descriptions, the changes won't be saved in the logbook. To describe the changes, we write a 'commit' in the logbook.

Concretely, if we come back to vscode :  

1. We write `git init` in the terminal console to initialise a git folder. This create a hidden folder inside of our folder, named `.git`. You must not necessarily see it to use git. 
2. We then click on "new file" on vscode, for example a text-file. We write something in it, and save it as `text.txt`.
3. We begin tracking this file with git, using `git add text.txt`. 
4. We describe our action using `git commit -m "Adding a text file."`.

At this point, you should have something like that :

![Initializing git, adding a file, and commiting its change.](./resources/images/1_7_basic_setup_git)

At any point, we can use some other git commands to have more information. For example : 

- `git status` informs us about which files in our folder are being tracked, and what modifications are not yet registered.
- `git log` gives back the logbook, i.e. the list of changes that were saved.
- `git diff` gives the differences between the current version of your files and the latest version saved in the logbook.

Finally, it is also useful to set up a branch. Without entering into too much details, a branch is the path in which you are registering all your commits and files. If you create another branch, then, it would mean .
It is important to set up a main branch, in order for git not to bug in future operations.
In order to do so, we can enter : `git branch -M main` in the terminal. 

Git is a very powerful tool that allows to do a lot of collabortive code managing, but we choose here to mainly exploit one of its features : remote synchronization. 
In addition to having this local logbook on your computer, you can indeed also send your files to a remote server, in a similar way than the cloud or a remote drive.
This is where GitHub enters into play. 

## Basics of GitHub

GitHub is a firm (currently owned by Microsoft) that puts at disposition servers which you can use to store your data.
It has a lot of different uses, including collaborative coding, but this tutorial only focuses on how to use it to manage your project with Git and Quarto.
It is widely used in the programming community and is also sometimes referred as the social network of developers. 

To use GitHub, the first step is to go to [GitHub](https://github.com) and create an account. Once your account is created, you can create a repository, named "username.github.io", replacing "username" with your actual user name. Since I choose the username `frpgcd`, I will create in the example a repository name "frpgcd.github.io".

![Click on the green button "Create a repository".](./resources/images/1_9_starting_page_github.png)

![Starting page of the repository creation process.](./resources/images/1_10_create_repo.png)

![Page of the repository creation process filled with information.](./resources/images/1_11_create_repo_filled.png)

> Note : During the creation process of a repository, you are asked for a license. It is important to chose one, because without it, the most restrictive policy applies. After a quick research, it seems that the [Creative Commons BY-NC-ND 4.0 Deed license](https://creativecommons.org/licenses/by-nc-nd/4.0/) should cover all the cases we need for an online academic portfolio. It is very permissive, but requires citation ("appropriate credit"), does not allows for commercial uses and derivatives. If your needs are different, it is worth looking into different kinds of license to see which one is better for your own usage.

Once it is done, we can go back to vscode, to add a connection between our local folder and the remote repository we just created. In order to do that, we first have to configurate git.

1. Enter `git config --global user.name "Your Name"`, replacing "Your Name" with the name of your choice. It doesn't have to be the same as your GitHub user name. 

2. Enter `git config --global user.email "your@mail.com"`, replacing "your@mail.com" with the email of your choice. Note that it does not require you to actually own this email adress.

3. Then, we have to add a ssh key to our GitHub account. An ssh key allows you to communicate to GitHub from your computer. Enter `ssh-keygen -t ed25519 -C "your@email.com"`, replacing "your@email" with your actual email. Your terminal will ask for a passphrase, but it's better for simplicity purposes to not enter anything, and just press the enter key on your keyboard.

In my case, my first name is Paulo and my last is Gugelmo Cavalheiro Dias, and I choose the username "frpgcd" for demonstration purposes, I would then enter in my Terminal console : 


```{.zsh}
git config --global user.name "frpgcd"
git config --global user.email "frpgcd@mail.com"
ssh-keygen -t ed25519 -C "frpgcd@email.com"

```

4. Now, we are going to use this key to establish a connection with GitHub. On your terminal, you can enter `cat ~/.ssh/id_ed25519.pub` or `open ~/.ssh/id_ed25519.pub`, and it will give you back a character string beginning with "ssh-ed22519". Go to your GitHub account, click on your profile picture at the top right of the website, choose "settings", then click on "ssh and gpg keys", then on "add new ssh key", choose the title you want (for example the name of your current computer), and in "key", add the value your terminal gave back to you. You should be connected !

![In your settings, find the ssh and gpg keys section.](./resources/images/1_12_ssh_keys.png)

![After having clicked on "New SSH Key", you can add what you get from your terminal after entering "cat ~/.ssh/id_ed25519.pub" in the "Key" section.](./resources/images/1_13_ssh_keys_info.png)

> Note : You should not share your ssh keys to the public. It could jeopardize the safety of your data and access to the distant repository. 

5. Now that your GitHub account is connected to your computer, we have to connect your local folder to a repository. Go on your repository, and copy the text it gives you in the SSH section (it should be something like "git@github.com:username/name_of_the_repository.git"). In your vscode terminal, with your folder open, you can then enter : `git remote add origin git@github.com:username/name_of_the_repository.git`. The connection between your local folder and the distant repository should be established. 

4. We can "push" the content of our local folder to our remote folder. This is a command that we use once all the changes are commited in our logbook to send all the information in the remote server. To be able to push correctly, you first enter `git push -u origin main`, and then you can just enter `git push` for the next times, when your changes are added and commited. 

In my case, I have, with the username "frpgcd" and the repository "frpgcd.github.io" : 
```{.zsh}
git remote add origin git@github.com:frpgcd/frpgcd.github.io.git
git push -u origin main
```

> Note : You can also initialise a git folder in another directory, and "clone" an existing GitHub repository. This will create a duplicate of this repository in your folder and on your GitHub account, or just load the data locally if it is one of your repositories. Although this is not covered in the current tutorial, you can check the Github and Git documentations to get more information on those operations. 

## Use Git and GitHub together 

Now that the connection between your local folder and your distant repository has been created, you can add modifications to your folder (like creating a new file), add those changes via `git add` followed by the name of your new document (you can also use `*` to select everything in your folder), commit those changes via `git commit -m "the description of your changes"`, and then push those changes via `git push`. This add-commit-push process is one of the basics to synchronize your local folder with the files of your GitHub account.  

For example, if we want to create a new file, named "new_file.txt", to enter some text in it, to save it and to track it with git, and then to send it to our distant GitHub repository, we would do, after saving the file : 

```{.zsh}
git add new_file.txt
git commit -m "Adding a new file."
git push
```

You can then verify that your changes have been taken into account by going on the website of GitHub, on your repository. Your tracked files should appear there.

## Further Resources

You are now ready to proceed to the second chapter, that treats content generation with Quarto. However, if you wish to dive deeper into the tools presented in this first chapter, and try to understand better Git, GitHub, or even the Terminal and Visual Studio Code, you might be tempted to look at additional material. First of all, for all that has been covered in this tutorial, I recommend the lecture of Florian Oswald about git and github, available at  <https://floswald.github.io/ScPoProgramming/05-git.html>. For more specific questions, you might find the following resources useful : 

About vscode : 

- The official documentation of vscode, available at : <https://code.visualstudio.com/docs>

About the terminal : 

- The first four sessions of the Florian Oswald lecture, available at : <https://floswald.github.io/ScPoProgramming/>
- A general tutorial about the command line, including resources for Windows, MacOS, and Linux, available at : <https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line>
- The vscode documentation about the terminal inside vscode, that might require some prior knowledge about the command line, available at : <https://code.visualstudio.com/docs/terminal/basics>

About git : 

- The official documentation of git, availbale at : <https://git-scm.com/doc>
- The w3school tutorial for git, available at : <https://www.w3schools.com/git/>

About github : 

- The official tutorial of github on using git and github together, available at : <https://docs.github.com/en/get-started/start-your-journey>

